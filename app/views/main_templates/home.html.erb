<!DOCTYPE html>
<html>
  <head>
    <title>Dictation App</title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>
    <!-- Include Bootstrap CSS (optional) -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-kOQoZwnWGA6Z1mw/6Oa8QoTmJ7Iz1nYlTk0SlD6eAR7AsH6lKiFhiop9B4hJxw4l"
      crossorigin="anonymous"
    />
  </head>

  <body>
    <div class="container">
      <h1 class="mb-4">Dictation App</h1>
      
      <!-- Status Message -->
      <div id="status-message">Please enable microphone access to start recording.</div>

      <!-- Action Button: Grant Access / Hold to Record -->
      <button id="action-button" class="grant">Grant Microphone Access</button>

      <!-- Hardcore Mode Checkbox -->
      <div class="form-check mt-3">
        <input
          type="checkbox"
          class="form-check-input"
          id="hardcore-mode"
          checked
        />
        <label class="form-check-label" for="hardcore-mode">
          Skip confirmation ("hardcore mode")
        </label>
      </div>

      <!-- Transcription Section -->
      <div id="transcription-section" style="display: none; margin-top: 20px;">
        <label for="transcription">Transcription:</label>
        <textarea
          id="transcription"
          class="form-control"
          rows="5"
          placeholder="Transcription will appear here..."
        ></textarea>
        <button id="confirm-button" class="btn btn-secondary mt-2">
          Confirm
        </button>
      </div>

      <!-- Events Section -->
      <div class="log-section mt-4" id="events-section">
        <h3>Events</h3>
        <table class="table">
          <thead>
            <tr>
              <th>Timestamp</th>
              <th>Event</th>
            </tr>
          </thead>
          <tbody id="events-table-body">
            <% if @events.present? %>
              <% @events.each do |event| %>
                <tr>
                  <td><%= event[:timestamp] %></td>
                  <td><%= event[:message] %></td>
                </tr>
              <% end %>
            <% else %>
              <tr>
                <td colspan="2">No events to display.</td>
              </tr>
            <% end %>
          </tbody>
        </table>
      </div>

      <!-- Recent Activities Section -->
      <div class="log-section mt-4" id="recent-activities-section">
        <h3>Recent Activities</h3>
        <table class="table">
          <thead>
            <tr>
              <th>Timestamp</th>
              <th>Recording</th>
              <th>Action</th>
              <th>Type</th>
              <th>URL</th>
            </tr>
          </thead>
          <tbody>
            <% if @activities.present? %>
              <% @activities.each do |activity| %>
                <tr>
                  <td><%= activity.created_at.strftime("%Y-%m-%d %H:%M:%S") %></td>
                  <td><%= activity.recording.body %>
                  <td><%= activity.action.capitalize %></td>
                  <td><%= activity.database_name.capitalize %></td>
                  <td><a href="<%= activity.page_url %>" target="_blank">Open in Notion</a></td>
                </tr>
              <% end %>
            <% else %>
              <tr>
                <td colspan="4">No recent activities to display.</td>
              </tr>
            <% end %>
          </tbody>
        </table>
      </div>
    </div>

    <!-- Include Bootstrap JS and dependencies (optional) -->
    <script 
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" 
      integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" 
      crossorigin="anonymous"></script>
    <script
      src="https://code.jquery.com/jquery-3.7.1.slim.min.js"
      integrity="sha256-kmHvs0B+OpCW5GVHUNjv9rOmY0IvSIRcf7zGUDTDQM8="
      crossorigin="anonymous"></script>

    <script>
      // JavaScript Functionality

      // Select Elements
      const actionButton = document.getElementById('action-button');
      const statusMessage = document.getElementById('status-message');
      const hardcoreModeCheckbox = document.getElementById('hardcore-mode');
      const transcriptionSection = document.getElementById('transcription-section');
      const transcriptionTextBox = document.getElementById('transcription');
      const confirmButton = document.getElementById('confirm-button');
      const eventsTableBody = document.getElementById('events-table-body');

      // MediaRecorder and Stream Variables
      let mediaRecorder;
      let audioChunks = [];

      // Flag to Check Microphone Access
      let hasMicrophoneAccess = false;

      // Function to check microphone permission status
      async function checkMicrophonePermission() {
        try {
          const permissionStatus = await navigator.permissions.query({ name: 'microphone' });
          return permissionStatus.state; // 'granted', 'denied', or 'prompt'
        } catch (error) {
          console.error('Permissions API error:', error);
          // Fallback to getUserMedia if Permissions API is not supported
          return 'prompt';
        }
      }

      // Function to Initialize MediaRecorder
      async function initializeRecorder() {
        try {
          const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
          hasMicrophoneAccess = true;
          statusMessage.textContent = 'Microphone access granted. Click and hold the button to start recording.';
          // Change button to "Hold to Record"
          actionButton.textContent = 'Hold to Record';
          actionButton.classList.remove('grant');
          actionButton.classList.add('record');

          // Initialize MediaRecorder
          mediaRecorder = new MediaRecorder(stream);

          // Event Handlers for MediaRecorder
          mediaRecorder.ondataavailable = (event) => {
            audioChunks.push(event.data);
          };

          mediaRecorder.onstop = handleRecordingStop;

          // Add Event Listeners for Recording
          actionButton.addEventListener('mousedown', startRecording);
          actionButton.addEventListener('touchstart', startRecording);
          actionButton.addEventListener('mouseup', stopRecording);
          actionButton.addEventListener('touchend', stopRecording);
          actionButton.addEventListener('mouseleave', stopRecording);

          addEvent('Microphone initialized and ready.');
        } catch (error) {
          console.error('Error accessing microphone:', error);
          statusMessage.textContent = 'Microphone access denied. Please enable it to use the app.';
          actionButton.disabled = true;
          addEvent('Microphone access denied.');
        }
      }

      // Function to Initialize App
      async function initializeApp() {
        const permissionState = await checkMicrophonePermission();

        if (permissionState === 'granted') {
          // If permission is already granted, initialize the recorder
          initializeRecorder();
        } else if (permissionState === 'prompt') {
          // If permission needs to be requested, ensure the Grant button is available
          actionButton.textContent = 'Grant Microphone Access';
          actionButton.classList.remove('record', 'processing');
          actionButton.classList.add('grant');
        } else {
          // If permission is denied, disable the action button and notify the user
          statusMessage.textContent = 'Microphone access denied. Please enable it in your browser settings to use the app.';
          actionButton.disabled = true;
          addEvent('Microphone access denied.');
        }

        // Update transcription section visibility based on hardcore mode
        updateTranscriptionSectionVisibility();
      }

      // Listen for changes in microphone permission
      async function listenForPermissionChanges() {
        try {
          const permissionStatus = await navigator.permissions.query({ name: 'microphone' });
          permissionStatus.onchange = () => {
            if (permissionStatus.state === 'granted') {
              initializeRecorder();
            } else if (permissionStatus.state === 'denied') {
              statusMessage.textContent = 'Microphone access denied. Please enable it in your browser settings to use the app.';
              actionButton.disabled = true;
              addEvent('Microphone access denied.');
            }
          };
        } catch (error) {
          console.error('Permissions API error:', error);
          // Permissions API might not be supported; no action needed
        }
      }

      // Function to Initialize App on Page Load
      window.addEventListener('load', () => {
        initializeApp();
        appendServerEvents();
        listenForPermissionChanges();
      });

      // Grant Microphone Access Handler
      actionButton.addEventListener('click', () => {
        if (!hasMicrophoneAccess) {
          initializeRecorder();
        }
      });

      // Start Recording
      function startRecording(event) {
        event.preventDefault(); // Prevent default behavior for touch events
        if (mediaRecorder && mediaRecorder.state === 'inactive') {
          audioChunks = [];
          mediaRecorder.start();
          statusMessage.textContent = 'Recording... Release the button to stop.';
          actionButton.classList.add('processing');
          addEvent('Recording started.');
        }
      }

      // Stop Recording
      function stopRecording(event) {
        event.preventDefault(); // Prevent default behavior for touch events
        if (mediaRecorder && mediaRecorder.state === 'recording') {
          mediaRecorder.stop();
          statusMessage.textContent = 'Processing...';
          actionButton.classList.remove('processing');
          addEvent('Recording stopped.');
        }
      }

      // Handle Recording Stop
      async function handleRecordingStop() {
        const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
        const formData = new FormData();
        formData.append('audio', audioBlob, 'recording.webm');
        formData.append('hardcore_mode', hardcoreModeCheckbox.checked ? '1' : '0');

        try {
          const response = await fetch('/upload_audio', {
            method: 'POST',
            headers: {
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
            },
            body: formData
          });

          if (response.ok) {
            const data = await response.json();
            if (hardcoreModeCheckbox.checked) {
              // Hardcore Mode: Immediately process
              statusMessage.textContent = 'Audio transcribed and processed successfully.';
              addEvent('Audio transcribed and processed in hardcore mode.');
              // Reload the page to fetch new activities
              location.reload();
            } else {
              // Non-Hardcore Mode: Display transcription for confirmation
              transcriptionTextBox.value = data.transcription;
              transcriptionSection.style.display = 'block';
              statusMessage.textContent = 'Transcription available. Please confirm.';
              addEvent('Audio transcribed and ready for confirmation.');
            }
          } else {
            console.error('Server Error:', response.statusText);
            statusMessage.textContent = 'Error processing audio. Please try again.';
            addEvent(`Error processing audio: ${response.statusText}`);
          }
        } catch (error) {
          console.error('Fetch Error:', error);
          statusMessage.textContent = 'Error processing audio. Please try again.';
          addEvent(`Error processing audio: ${error.message}`);
        }
      }

      // Confirm Button Handler
      confirmButton.addEventListener('click', () => {
        const transcription = transcriptionTextBox.value.trim();
        if (!transcription) {
          alert('Transcription is empty. Please try recording again.');
          return;
        }

        // Create a form and submit it
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = '/confirm';

        const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
        const csrfInput = document.createElement('input');
        csrfInput.type = 'hidden';
        csrfInput.name = 'authenticity_token';
        csrfInput.value = csrfToken;
        form.appendChild(csrfInput);

        const transcriptionInput = document.createElement('input');
        transcriptionInput.type = 'hidden';
        transcriptionInput.name = 'transcription';
        transcriptionInput.value = transcription;
        form.appendChild(transcriptionInput);

        document.body.appendChild(form);
        form.submit();
      });

      // Function to Add Entries to Events
      function addEvent(message) {
        const tr = document.createElement('tr');
        const timestampTd = document.createElement('td');
        const messageTd = document.createElement('td');

        const timestamp = new Date().toLocaleTimeString();
        timestampTd.textContent = timestamp;
        messageTd.textContent = message;

        tr.appendChild(timestampTd);
        tr.appendChild(messageTd);
        eventsTableBody.prepend(tr); // Add to the top
      }

      // Function to Append Server-Side Events
      async function appendServerEvents() {
        try {
          const response = await fetch('/fetch_events', {
            method: 'GET',
            headers: {
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
            }
          });

          if (response.ok) {
            const data = await response.json();
            if (data.events && data.events.length > 0) {
              data.events.forEach(event => {
                addEvent(event);
              });
            }
          } else {
            console.error('Failed to fetch server-side events.');
          }
        } catch (error) {
          console.error('Error fetching server-side events:', error);
        }
      }

      // Function to update the visibility of the transcription section based on hardcore mode checkbox
      function updateTranscriptionSectionVisibility() {
        if (hardcoreModeCheckbox.checked) {
          // Hardcore mode is enabled, hide transcription section
          transcriptionSection.style.display = 'none';
        } else {
          // Hardcore mode is disabled, show transcription section
          transcriptionSection.style.display = 'block';
        }
      }

      // Add event listener to hardcore mode checkbox
      hardcoreModeCheckbox.addEventListener('change', updateTranscriptionSectionVisibility);

    </script>

  </body>
</html>
