<h1>Dictation App</h1>

<% if @action_log.present? %>
  <div style="background-color: #f0f8ff; padding: 10px; border-radius: 5px;">
    <h3>Action Log:</h3>
    <pre><%= @action_log %></pre>
  </div>
<% elsif flash[:alert] %>
  <p style="color: red;"><%= flash[:alert] %></p>
<% end %>

<input type="checkbox" id="skip_confirmation" name="skip_confirmation" value="1" checked>
<label for="skip_confirmation">Skip confirmation step ("hardcore mode")</label>
<br><br>

<button id="record-button">Record</button>
<button id="stop-button" disabled>Stop</button>

<form action="/submit" method="post">
  <input type="hidden" name="authenticity_token" value="<%= form_authenticity_token %>">
  <label for="input_box"></label>
  <textarea id="input_box" name="input" rows="3" placeholder="Dictation will appear here..." lang="en"></textarea>
  <br>
  <button type="submit">Submit</button>
</form>

<h3>Example prompts</h3>
<ol>
<li>I need to add cumin to my shopping list</li>
<li>I spoke to Lydia Wang from my Digital Marketing class. We both have to finish the LinkedIn social media ads for SearchStax by Friday next week.</li>
<li>I spoke to Jivika. He can get me an interview with Notion.</li>
<li>I had a brilliant conversation with Professor Lil Mohan. We had a great conversation about the deterioration of incoming MBA students, year over year.</li>
<li>Lorna just reminded me that I need to pick her up from the airport on Friday.</li>
<li>Need to buy cumin, black pepper, 1 yellow onion, 2 tomatoes, 4 eggplants, and a bottle of whiskey.</li>
<li>I was sitting next to Paul Kozhipatt in my Managing the Workplace class. He advised me to finish it before applying to Apple.</li>
</ol>

<script src="https://cdn.webrtc-experiment.com/RecordRTC.js"></script>
<script>
  let recorder;
  let stream;

  const recordButton = document.getElementById('record-button');
  const stopButton = document.getElementById('stop-button');
  const inputBox = document.getElementById('input_box');
  const hardcoreModeCheckbox = document.getElementById('skip_confirmation');

  recordButton.addEventListener('click', async () => {
    console.log('Record button clicked');
    recordButton.disabled = true;
    stopButton.disabled = false;

    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
      try {
        console.log('Requesting microphone access');
        stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        console.log('Microphone access granted');
        recorder = RecordRTC(stream, { type: 'audio', mimeType: 'audio/wav' });
        recorder.startRecording();
        console.log('Recording started');
      } catch (err) {
        console.error('Error accessing microphone:', err);
        alert('An error occurred while accessing the microphone.');
        recordButton.disabled = false;
        stopButton.disabled = true;
      }
    } else {
      alert('Your browser does not support audio recording.');
      console.warn('Browser does not support audio recording');
    }
  });

  stopButton.addEventListener('click', () => {
    console.log('Stop button clicked');
    recorder.stopRecording(() => {
      console.log('Recording stopped');
      let blob = recorder.getBlob();
      console.log('Blob created:', blob);

      const formData = new FormData();
      formData.append('audio_file', blob, 'recording.wav');
      formData.append('authenticity_token', '<%= form_authenticity_token %>');

      const hardcoreMode = hardcoreModeCheckbox.checked ? '1' : '0';
      formData.append('skip_confirmation', hardcoreMode);
      console.log('FormData prepared:', {
        audio_file: blob,
        authenticity_token: '<%= form_authenticity_token %>',
        skip_confirmation: hardcoreMode
      });

      const fetchOptions = {
        method: 'POST',
        body: formData
      };

      if (hardcoreMode === '1') {
        console.log('Submitting audio in hardcore mode');
        // Hardcore mode: process immediately without updating the textarea
        fetch('/upload_audio', fetchOptions)
          .then(response => response.json())
          .then(data => {
            console.log('Response received:', data);
            if (data.success) {
              // Reload the page to display the flash message
              window.location.reload();
            } else {
              alert(data.error || 'An error occurred during processing.');
              recordButton.disabled = false;
              stopButton.disabled = true;
              console.error('Processing failed:', data.error);
            }
          })
          .catch(error => {
            console.error('Fetch error:', error);
            alert('An error occurred during processing.');
            recordButton.disabled = false;
            stopButton.disabled = true;
          });
      } else {
        console.log('Submitting audio in normal mode');
        // Normal mode: update the textarea with the transcription
        fetch('/upload_audio', fetchOptions)
          .then(response => response.json())
          .then(data => {
            console.log('Response received:', data);
            if (data.transcription) {
              inputBox.value = data.transcription;
              console.log('Textarea updated with transcription');
            } else {
              alert('No transcription received.');
              console.warn('No transcription in response');
            }
            recordButton.disabled = false;
            stopButton.disabled = true;
          })
          .catch(error => {
            console.error('Fetch error:', error);
            alert('An error occurred during transcription.');
            recordButton.disabled = false;
            stopButton.disabled = true;
          });
      }

      // Stop all audio tracks to release the microphone
      if (stream) {
        stream.getTracks().forEach(track => track.stop());
        console.log('Audio tracks stopped');
      }
    });
  });
</script>
