<!-- app/views/main_templates/home.html.erb -->

<!DOCTYPE html>
<html>
  <head>
    <title>Dictation App</title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <style>
      /* Optional: Add some custom styles for better UX */
      #record-button.recording {
        background-color: #dc3545; /* Bootstrap danger color */
        color: white;
      }
      #record-button.processing {
        background-color: #ffc107; /* Bootstrap warning color */
        color: black;
      }
      #processing-indicator {
        display: none;
        color: #ffc107;
        font-weight: bold;
        margin-bottom: 1rem;
      }
      /* Additional styles for permission messages */
      #permission-message, #permission-granted-indicator {
        margin-bottom: 1rem;
      }

      /* Styles for Grant Button */
      #grant-mic-button {
        display: none; /* Initially hidden */
        margin-bottom: 1rem;
      }
    </style>
  </head>

  <body>
    <div class="container mt-5">
      <a href="/" class="btn btn-secondary mb-4">Back to Home</a>
      <hr>

      <h1 class="mb-4">Dictation App</h1>

      <!-- Permission Messages -->
      <div id="permission-message" class="alert alert-warning" style="display: none;">
        Microphone access is required for recording. Please grant access to use the recording feature.
      </div>
      <div id="permission-granted-indicator" class="text-success fw-bold mb-3" style="display: none;">
        Microphone access granted. You can start recording.
      </div>
      <div id="permission-denied-indicator" class="alert alert-danger" style="display: none;">
        Microphone access denied. Please allow access to use the recording feature.
      </div>

      <!-- Grant Microphone Access Button -->
      <button id="grant-mic-button" class="btn btn-primary mb-3">Grant Microphone Access</button>

      <!-- Hold to Record Button -->
      <button id="record-button" class="btn btn-danger mb-3" aria-label="Hold to start recording" aria-pressed="false">
        Hold to Record
      </button>

      <!-- Hardcore Mode Checkbox -->
      <div class="form-check mb-3">
        <input type="checkbox" class="form-check-input" id="skip_confirmation" name="skip_confirmation" value="1" checked>
        <label class="form-check-label" for="skip_confirmation">Skip confirmation step ("hardcore mode")</label>
      </div>

      <!-- Recording Indicator -->
      <div id="recording-indicator" class="text-danger fw-bold mb-3" style="display: none;">
        Recording...
      </div>

      <!-- Action Log Container -->
      <div id="action-log-container" class="bg-info text-white p-3 rounded mb-4">
        <h3>Action Log:</h3>
        
        <!-- Transcription Section -->
        <div id="transcription-section" class="mb-3">
          <% if flash[:transcription].present? %>
            <p><strong>Transcription:</strong> <%= sanitize(flash[:transcription]) %></p>
          <% else %>
            <p id="no-transcription-message">No transcription available.</p>
          <% end %>
        </div>
        
        <!-- History Section -->
        <div id="history-section">
          <% if flash[:notice].present? && flash[:notice].any? %>
            <h4>History:</h4>
            <ul>
              <% flash[:notice].each do |entry| %>
                <% if entry['url'] %>
                  <li>
                    <strong><%= entry['message'] %></strong>:
                    <a href="<%= entry['url'] %>" target="_blank" class="text-white"><u>View in Notion</u></a>
                  </li>
                <% else %>
                  <li><%= entry['message'] %></li>
                <% end %>
              <% end %>
            </ul>
          <% else %>
          <% end %>
        </div>
      </div>

      <!-- Transcription Form -->
      <form action="/submit" method="post" class="mb-4">
        <%= hidden_field_tag :authenticity_token, form_authenticity_token %>
        <div class="mb-3">
          <%= label_tag :input_box, "Transcription", class: "form-label" %>
          <%= text_area_tag :input, @input || "", id: "input_box", rows: 5, placeholder: "Dictation will appear here...", class: "form-control", lang: "en" %>
        </div>
        <button type="submit" class="btn btn-primary">Submit</button>
      </form>

      <!-- Example Prompts -->
      <h3>Example Prompts</h3>
      <ol>
        <li>I need to add cumin to my shopping list</li>
        <li>I spoke to Lydia Wang from my Digital Marketing class. We both have to finish the LinkedIn social media ads for SearchStax by Friday next week.</li>
        <li>I spoke to Jivika. She can get me an interview with Notion.</li>
        <li>I had a brilliant conversation with Professor Lil Mohan. We had a great conversation about the deterioration of incoming MBA students, year over year.</li>
        <li>Lorna just reminded me that I need to pick her up from the airport on Friday.</li>
        <li>Need to buy cumin, black pepper, 1 yellow onion, 2 tomatoes, 4 eggplants, and a bottle of whiskey.</li>
        <li>I was sitting next to Paul Kozhipatt in my Managing the Workplace class. He advised me to finish it before applying to Apple.</li>
        <li>Dinner plan tonight: Lebanese Pita Bread, Manakish, Lamb Tagine, Roasted Garlic Hummus, and Roasted Parsnips.</li>
      </ol>

      <!-- Include Bootstrap JS Bundle -->
      <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

      <!-- JavaScript for Recording and Action Log -->
      <script>
        document.addEventListener('DOMContentLoaded', () => {
          console.log('JavaScript Loaded');

          // DOM Elements
          const recordButton = document.getElementById('record-button');
          const grantMicButton = document.getElementById('grant-mic-button');
          const recordingIndicator = document.getElementById('recording-indicator');
          const inputBox = document.getElementById('input_box');
          const hardcoreModeCheckbox = document.getElementById('skip_confirmation');
          const actionLogContainer = document.getElementById('action-log-container');

          // Permission Indicators
          const permissionMessage = document.getElementById('permission-message');
          const permissionGrantedIndicator = document.getElementById('permission-granted-indicator');
          const permissionDeniedIndicator = document.getElementById('permission-denied-indicator');

          // Variables
          let mediaRecorder = null;
          let audioChunks = [];
          let isRecording = false;
          let microphonePermissionGranted = false;

          // Function to sanitize HTML to prevent XSS
          const sanitizeHTML = (str) => {
            const temp = document.createElement('div');
            temp.textContent = str;
            return temp.innerHTML;
          };

          // Function to request microphone access
          const requestMicrophoneAccess = async () => {
            try {
              const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
              microphonePermissionGranted = true;
              permissionGrantedIndicator.style.display = 'block';
              permissionMessage.style.display = 'none';
              permissionDeniedIndicator.style.display = 'none';
              grantMicButton.style.display = 'none';
              console.log('Microphone permission granted.');
              // Stop the stream immediately as we only needed to get permission
              stream.getTracks().forEach(track => track.stop());
            } catch (error) {
              console.error('Microphone permission denied:', error);
              microphonePermissionGranted = false;
              permissionDeniedIndicator.style.display = 'block';
              permissionMessage.style.display = 'none';
              grantMicButton.style.display = 'block';
            }
          };

          // Event Listener for Grant Microphone Access Button
          grantMicButton.addEventListener('click', async () => {
            await requestMicrophoneAccess();
          });

          // Function to check microphone permission status
          const checkMicrophonePermission = async () => {
            if (navigator.permissions) {
              try {
                const permissionStatus = await navigator.permissions.query({ name: 'microphone' });
                microphonePermissionGranted = (permissionStatus.state === 'granted');
                if (microphonePermissionGranted) {
                  permissionGrantedIndicator.style.display = 'block';
                  permissionDeniedIndicator.style.display = 'none';
                  grantMicButton.style.display = 'none';
                } else if (permissionStatus.state === 'denied') {
                  permissionDeniedIndicator.style.display = 'block';
                  permissionGrantedIndicator.style.display = 'none';
                  grantMicButton.style.display = 'block';
                } else {
                  permissionMessage.style.display = 'block';
                  permissionGrantedIndicator.style.display = 'none';
                  permissionDeniedIndicator.style.display = 'none';
                  grantMicButton.style.display = 'none';
                }
              } catch (error) {
                console.warn('Permissions API not fully supported:', error);
                // Fallback if Permissions API is not supported
                microphonePermissionGranted = false;
                permissionMessage.style.display = 'block';
                permissionDeniedIndicator.style.display = 'none';
                permissionGrantedIndicator.style.display = 'none';
                grantMicButton.style.display = 'none';
              }
            } else {
              console.warn('Permissions API not supported in this browser.');
              // Fallback if Permissions API is not supported
              microphonePermissionGranted = false;
              permissionMessage.style.display = 'block';
              permissionDeniedIndicator.style.display = 'none';
              permissionGrantedIndicator.style.display = 'none';
              grantMicButton.style.display = 'none';
            }
          };

          // Initial check for microphone permission
          checkMicrophonePermission();

          // Function to start recording
          const startRecording = async () => {
            if (!microphonePermissionGranted) {
              // Show the grant microphone access button
              permissionMessage.style.display = 'block';
              grantMicButton.style.display = 'block';
              return;
            }

            try {
              const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
              mediaRecorder = new MediaRecorder(stream);

              // Event handler for data availability
              mediaRecorder.ondataavailable = (event) => {
                if (event.data.size > 0) {
                  audioChunks.push(event.data);
                }
              };

              // Event handler for stopping the recorder
              mediaRecorder.onstop = handleRecordingStop;

              // Start recording
              mediaRecorder.start();
              isRecording = true;
              recordingIndicator.style.display = 'block';
              recordButton.classList.add('recording');
              console.log('Recording started');
            } catch (error) {
              console.error('Error starting recording:', error);
              alert('An error occurred while trying to start recording.');
            }
          };

          // Function to stop recording
          const stopRecording = () => {
            if (!isRecording || !mediaRecorder) return;

            mediaRecorder.stop();
            isRecording = false;
            recordingIndicator.style.display = 'none';
            recordButton.classList.remove('recording');
            console.log('Recording stopped');
          };

          // Function to handle the recording stop event
          const handleRecordingStop = async () => {
            const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
            audioChunks = []; // Reset for next recording

            // Prepare form data
            const formData = new FormData();
            formData.append('audio_file', audioBlob, 'recording.webm');
            formData.append('authenticity_token', '<%= form_authenticity_token %>');
            formData.append('skip_confirmation', hardcoreModeCheckbox.checked ? '1' : '0');

            try {
              const response = await fetch('/upload_audio', {
                method: 'POST',
                body: formData
              });

              if (!response.ok) {
                const errorData = await response.json();
                throw errorData;
              }

              const data = await response.json();
              console.log('Fetch response:', data);

              if (hardcoreModeCheckbox.checked) {
                if (data.action_log && data.action_log.length > 0) {
                  displayActionLog(data.transcription, data.action_log);
                } else {
                  alert('No action log received.');
                  if (data.transcription) {
                    // Even if no action log, display transcription
                    displayActionLog(data.transcription, []);
                  }
                }
              } else if (data.transcription) {
                inputBox.value = sanitizeHTML(data.transcription);
              } else {
                alert('Unexpected response from the server.');
              }
            } catch (error) {
              console.error('Fetch error:', error);
              alert(error.error || 'An error occurred during processing.');
            }
          };

          // Function to display the Transcription and Action Log
          const displayActionLog = (transcription, actionLog) => {
            // Clear existing dynamic content
            const existingDynamicContent = document.getElementById('dynamic-action-log');
            if (existingDynamicContent) {
              existingDynamicContent.remove();
            }

            // Create a new Action Log section
            const actionLogDiv = document.createElement('div');
            actionLogDiv.id = 'dynamic-action-log';
            actionLogDiv.className = 'bg-info text-white p-3 rounded mb-4';

            // Transcription Section
            if (transcription) {
              const transcriptionHeader = document.createElement('h4');
              transcriptionHeader.textContent = 'Transcription:';
              actionLogDiv.appendChild(transcriptionHeader);

              const transcriptionPara = document.createElement('p');
              transcriptionPara.textContent = transcription;
              actionLogDiv.appendChild(transcriptionPara);
            }

            // History Section
            if (actionLog && actionLog.length > 0) {
              const historyHeader = document.createElement('h4');
              historyHeader.textContent = 'History:';
              actionLogDiv.appendChild(historyHeader);

              const ulHistory = document.createElement('ul');

              actionLog.forEach(entry => {
                const li = document.createElement('li');
                if (entry.url) {
                  li.innerHTML = `<strong>${sanitizeHTML(entry.message)}</strong>: <a href="${sanitizeHTML(entry.url)}" target="_blank" class="text-white"><u>View in Notion</u></a>`;
                } else {
                  li.textContent = sanitizeHTML(entry.message);
                }
                ulHistory.appendChild(li);
              });

              actionLogDiv.appendChild(ulHistory);
            }

            // Append the new Action Log to the container
            actionLogContainer.appendChild(actionLogDiv);
            console.log('Action log displayed');

            // Hide "No recent activity" and "No transcription available" messages
            if (transcription) {
              const noTranscriptionMessage = document.getElementById('no-transcription-message');
              if (noTranscriptionMessage) noTranscriptionMessage.style.display = 'none';
            }

            if (actionLog && actionLog.length > 0) {
              const noActivityMessage = document.getElementById('no-activity-message');
              if (noActivityMessage) noActivityMessage.style.display = 'none';
            }
          };

          // Event listeners for pointer events and keyboard events
          const handleStartEvent = async (event) => {
            event.preventDefault();
            await startRecording();
          };

          const handleStopEvent = (event) => {
            event.preventDefault();
            stopRecording();
          };

          // Pointer Events
          recordButton.addEventListener('pointerdown', handleStartEvent);
          recordButton.addEventListener('pointerup', handleStopEvent);
          recordButton.addEventListener('pointerleave', (event) => {
            if (isRecording) {
              handleStopEvent(event);
            }
          });

          // Prevent default behavior for pointer events to avoid accidental clicks
          recordButton.addEventListener('pointercancel', handleStopEvent);

          // Accessibility: Handle keyboard events (Space and Enter)
          recordButton.addEventListener('keydown', (event) => {
            if ((event.key === ' ' || event.key === 'Enter') && !isRecording) {
              handleStartEvent(event);
            }
          });

          recordButton.addEventListener('keyup', (event) => {
            if ((event.key === ' ' || event.key === 'Enter') && isRecording) {
              handleStopEvent(event);
            }
          });

          // Touch Events for iOS Compatibility
          recordButton.addEventListener('touchstart', handleStartEvent);
          recordButton.addEventListener('touchend', handleStopEvent);
        });
      </script>
    </div>
  </body>
</html>
